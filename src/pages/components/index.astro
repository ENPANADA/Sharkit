---
import Layout from "@layouts/Main.astro";
import Gallery from "@data/collections/components.json";
import { IconArrowAltCircleRight, Wave } from "@lib/Icons";
import { getGalleryCoverByName as Cover } from "@lib/Covers";
import { svgToDataUrl } from "@utils/IconsService";
import { COMPONENT_URL } from "@config/routes";

const arrow = svgToDataUrl(IconArrowAltCircleRight, { fill: "#310a65" });
const wave = svgToDataUrl(Wave, { fill: "#310a65" });
const wave2 = svgToDataUrl(Wave, { fill: "#08001e" });
const wave3 = svgToDataUrl(Wave, { fill: "#63e" });
---

<Layout info={false}>
  <h1>Components</h1>
  <p>
    Sharkit offers basic components for building interfaces, enabling rapid
    development without relying on external libraries.
  </p>
  <section>
    {
      Object.entries(Gallery).map(([section, data]) => (
        <article>
          <h2>
            {section} <hr />
          </h2>
          <figure>
            {data.map((element) => (
              <a href={COMPONENT_URL + element.link} title={element.tittle}>
                <Cover id={element.cover} />
                <h3>{element.tittle}</h3>
              </a>
            ))}
          </figure>
        </article>
      ))
    }
  </section>
</Layout>

<style define:vars={{ arrow, wave, wave2, wave3 }}>
  section {
    &::before {
      position: absolute;
      content: "";
      inset: 0;
      z-index: -2;
      background: var(--wave), var(--wave3), var(--wave2), var(--wave),
        var(--wave3), var(--wave2), var(--wave), var(--wave3), var(--wave2),
        var(--wave), var(--wave3), var(--wave2), var(--wave), var(--wave3),
        var(--wave2), var(--wave), var(--wave3);
      background-size:
        20% 9%,
        20% 10%,
        25% 18%,
        40% 27%,
        40% 28%,
        45% 39%,
        40% 50%,
        40% 52%,
        45% 63%,
        50% 75%,
        50% 78%,
        55% 90%,
        50% 105%,
        50% 108%,
        55% 123%,
        60% 140%,
        60% 145%;
      background-color: rgb(var(--bg-dark));
      background-repeat: repeat-x;
      background-position: bottom;
      background-attachment: fixed;
      filter: blur(6px);
      animation: translate-wave-position 50s infinite linear alternate;
    }

    &::after {
      content: "";
      position: fixed;
      inset: 0;
      z-index: -2;
      background-color: rgba(0 0 0 / 75%);
    }
  }

  h1 {
    margin: 0;
    background: var(--accent-gradient);
    background-clip: text;
    color: transparent;
    letter-spacing: -1px;
    font-family: ArchivoBlack;
    width: max-content;
  }

  h2 {
    color: rgb(var(--accent-light));
    font-family: ArchivoBlack;
    display: flex;
    align-items: center;
    gap: 10px;
  }

  hr {
    flex-grow: 1;
    border: 0;
    height: 1px;
    background: linear-gradient(
      to right,
      rgb(var(--accent-light)),
      rgb(var(--accent-secondary)),
      rgb(var(--accent)),
      rgb(var(--accent-dark))
    );
    background-clip: border-box;
  }

  p {
    font-size: 20px;
    line-height: 1.3;
  }

  figure {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 0.5em;
  }

  a {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: relative;
    background-color: rgb(var(--accent-dark));
    background-image: var(--gradient-linear-blur);
    border-radius: 10px;
    text-decoration: none;
    overflow: hidden;
    transition:
      filter 0.5s,
      box-shadow 0.2s;

    &::before {
      content: "";
      position: absolute;
      inset: 50%;
      z-index: 1;
      backdrop-filter: grayscale(100%) blur(2px);
      transition: inset 0.2s;
    }

    svg {
      display: block;
      width: 100%;
      height: 100%;
      object-fit: cover;
      box-sizing: border-box;
      background-color: rgb(0 0 0 / 15%);
      transition: transform 0.2s;

      &[data-default-cover] {
        padding: 20px;
      }
    }
  }

  h3 {
    margin: 0;
    display: flex;
    position: relative;
    padding: 5px 10px;
    background-color: rgb(var(--bg-dark) / 70%);
    color: rgb(var(--font-color));
    border-top: solid 1px rgb(var(--accent-dark));
    justify-content: space-between;
    align-items: center;
    gap: 5px;
    z-index: 1;
    transition:
      color 0.2s,
      background-color 0.2s;

    &::after {
      content: var(--arrow);
      height: 20px;
      width: 20px;
      transform: translateX(-100%) rotate(-90deg);
      opacity: 0;
      transition:
        transform 0.5s,
        opacity 0.5s;
    }
  }

  a:hover {
    box-shadow: 0 0 3px rgb(var(--accent-light));

    &::before {
      inset: 0;
    }

    svg {
      transform: scale(1.3);
    }

    h3 {
      background-color: rgb(var(--accent-light));
      color: rgb(var(--bg-dark));

      &::after {
        transform: translateX(0) rotate(0);
        opacity: 1;
      }
    }
  }

  @keyframes translate-wave-position {
    to {
      background-position:
        200% bottom,
        -200% bottom;
    }
  }
</style>
